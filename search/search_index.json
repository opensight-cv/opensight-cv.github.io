{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenSight: the powerful, easy-to-use vision suite \u00b6 OpenSight is an FRC-focused, free and open source computer vision system targeted specifically for the Raspberry Pi. Our goal is to make it easy for people not familiar with vision to be able to make complex pipelines, while also providing powerful functionality for advanced users. Want to get it? \u00b6 For Raspberry Pi, Download the latest release image , flash it onto a micro-sd card, plug it in, then navigate to http://opensight.local once connected to a robot network. For installing OpenSight on non-Raspberry Pi devices and for upgrading from previous versions of OpenSight, you can find more information here . About \u00b6 Our mission is to create an accessible vision suite, with an easy-to-use and works out-of-the box experience, but also allow for more power and greater customizability. We want to make vision more accessible to those with less experience, while also providing the tools for power users and developers to easily add features beyond the default modules.","title":"Home"},{"location":"#opensight-the-powerful-easy-to-use-vision-suite","text":"OpenSight is an FRC-focused, free and open source computer vision system targeted specifically for the Raspberry Pi. Our goal is to make it easy for people not familiar with vision to be able to make complex pipelines, while also providing powerful functionality for advanced users.","title":"OpenSight: the powerful, easy-to-use vision suite"},{"location":"#want-to-get-it","text":"For Raspberry Pi, Download the latest release image , flash it onto a micro-sd card, plug it in, then navigate to http://opensight.local once connected to a robot network. For installing OpenSight on non-Raspberry Pi devices and for upgrading from previous versions of OpenSight, you can find more information here .","title":"Want to get it?"},{"location":"#about","text":"Our mission is to create an accessible vision suite, with an easy-to-use and works out-of-the box experience, but also allow for more power and greater customizability. We want to make vision more accessible to those with less experience, while also providing the tools for power users and developers to easily add features beyond the default modules.","title":"About"},{"location":"glossary/","text":"Glossary \u00b6 This page contains a list of the words you may seen used in these documents or in disucssion. Module A directory or single Python file which supplies OpenSight with Functions.","title":"Glossary"},{"location":"glossary/#glossary","text":"This page contains a list of the words you may seen used in these documents or in disucssion. Module A directory or single Python file which supplies OpenSight with Functions.","title":"Glossary"},{"location":"planned/","text":"Planned pages \u00b6 For a description of what will be in each page, see the respective files in the docs repo . Getting Started: Hardware: getting-started/hardware.md Installation: getting-started/installation.md Upgrading: getting-started/upgrading.md Modules: Contours: modules/contours.md Video IO: modules/videoio.md Color Operations: modules/color.md Mask Operations: modules/mask.md Drawing Operations: modules/draw.md NetworkTables: modules/nt.md","title":"Planned Pages"},{"location":"planned/#planned-pages","text":"For a description of what will be in each page, see the respective files in the docs repo . Getting Started: Hardware: getting-started/hardware.md Installation: getting-started/installation.md Upgrading: getting-started/upgrading.md Modules: Contours: modules/contours.md Video IO: modules/videoio.md Color Operations: modules/color.md Mask Operations: modules/mask.md Drawing Operations: modules/draw.md NetworkTables: modules/nt.md","title":"Planned pages"},{"location":"getting-started/hardware/","text":"TODO: Detail different raspi bundles, expected framerates, 12V->5V, etc","title":"Hardware"},{"location":"getting-started/installation/","text":"Installing on Raspberry Pi \u00b6 Note This is only required on the first installation of the image. After that, you can use the upgrader in order to upgrade your installation. Any exceptions to this will be plainly noted on the releases page. Insert your Raspberry Pi's Micro SD card into your computer. Please note that you need a Micro SD card with at least 4GB. All data on the SD card will be erased during the installation process . Download the latest Raspberry Pi image file from the releases page . Install a disk imaging software. The simplest imaging software is balenaEtcher . Click \"Select an Image\" and select the .zip file image you downloaded in step 1. For the drive, select your Micro SD card. Click \"Flash\". After this finishes, you can put your Micro SD card back into your Pi. OpenSight should now be running! Continue to the Quick Start page. If you have any issues, please join our Discord , let us know the issue in the #help channel and we'll help you troubleshoot. Installing on Debian ARM systems \u00b6 If you are running a Debian ARM based system, you can use the same packages generated for the Raspberry Pi. If the output of dpkg - architecture - q DEB_BUILD_ARCH is armhf , you can use the following set of instructions. Types of systems that meet this requirement would be: Raspberry Pi Jetson Nano Many coprocessors Here are the differences between using the packages and installing with the regular Linux script: Automatic startup Installed system-wide Can use the upgrader Run these commands to do so: sudo apt update sudo apt install -y curl git jq mkdir /tmp/opsi ; cd /tmp/opsi url = \" $( curl https://api.github.com/repos/opensight-cv/packages/releases/latest | jq -r '.[\"assets\"][][\"browser_download_url\"]' | grep -v with ) \" curl -LO $url mkdir -p packages tar xf opsi-packages-*.tar.gz -C packages sudo apt install -y ./packages/deps/*.deb rm -rf /tmp/opsi/ Installing on other systems \u00b6 Currently, OpenSight is only directly supported on Linux. It should still work on Windows or MacOS, however the process to do so is far too elaborate to explain here (requries compiling multiple Python libraries). If you are running a non-Debian derivative system (eg. anything other than Debian, Ubuntu, or Mint), you will need to install your distribution's version of the following: build - essential bzip2 git curl tar python3 . 7 python3 - dev python3 . 7 - dev python3 - pip python3 - venv Once you have done this, or if you are running a Debian derivative, simply run this command to create an OpenSight instance in your current directory: curl - O https : // opensight - cv . github . io / install - opsi . sh chmod + x install - opsi . sh . / install - opsi . sh or curl https : // opensight - cv . github . io / install - opsi . sh | bash Warning Please only run the one line command if you understand the security implications of it. We recommend you inspect the installation script to ensure it is safe.","title":"Installation"},{"location":"getting-started/installation/#installing-on-raspberry-pi","text":"Note This is only required on the first installation of the image. After that, you can use the upgrader in order to upgrade your installation. Any exceptions to this will be plainly noted on the releases page. Insert your Raspberry Pi's Micro SD card into your computer. Please note that you need a Micro SD card with at least 4GB. All data on the SD card will be erased during the installation process . Download the latest Raspberry Pi image file from the releases page . Install a disk imaging software. The simplest imaging software is balenaEtcher . Click \"Select an Image\" and select the .zip file image you downloaded in step 1. For the drive, select your Micro SD card. Click \"Flash\". After this finishes, you can put your Micro SD card back into your Pi. OpenSight should now be running! Continue to the Quick Start page. If you have any issues, please join our Discord , let us know the issue in the #help channel and we'll help you troubleshoot.","title":"Installing on Raspberry Pi"},{"location":"getting-started/installation/#installing-on-debian-arm-systems","text":"If you are running a Debian ARM based system, you can use the same packages generated for the Raspberry Pi. If the output of dpkg - architecture - q DEB_BUILD_ARCH is armhf , you can use the following set of instructions. Types of systems that meet this requirement would be: Raspberry Pi Jetson Nano Many coprocessors Here are the differences between using the packages and installing with the regular Linux script: Automatic startup Installed system-wide Can use the upgrader Run these commands to do so: sudo apt update sudo apt install -y curl git jq mkdir /tmp/opsi ; cd /tmp/opsi url = \" $( curl https://api.github.com/repos/opensight-cv/packages/releases/latest | jq -r '.[\"assets\"][][\"browser_download_url\"]' | grep -v with ) \" curl -LO $url mkdir -p packages tar xf opsi-packages-*.tar.gz -C packages sudo apt install -y ./packages/deps/*.deb rm -rf /tmp/opsi/","title":"Installing on Debian ARM systems"},{"location":"getting-started/installation/#installing-on-other-systems","text":"Currently, OpenSight is only directly supported on Linux. It should still work on Windows or MacOS, however the process to do so is far too elaborate to explain here (requries compiling multiple Python libraries). If you are running a non-Debian derivative system (eg. anything other than Debian, Ubuntu, or Mint), you will need to install your distribution's version of the following: build - essential bzip2 git curl tar python3 . 7 python3 - dev python3 . 7 - dev python3 - pip python3 - venv Once you have done this, or if you are running a Debian derivative, simply run this command to create an OpenSight instance in your current directory: curl - O https : // opensight - cv . github . io / install - opsi . sh chmod + x install - opsi . sh . / install - opsi . sh or curl https : // opensight - cv . github . io / install - opsi . sh | bash Warning Please only run the one line command if you understand the security implications of it. We recommend you inspect the installation script to ensure it is safe.","title":"Installing on other systems"},{"location":"getting-started/quickstart/","text":"TODO: explain basic opensight functions, how to setup a nodetree, etc","title":"Quick Start"},{"location":"getting-started/upgrading/","text":"TODO: Explain how to upgrade on raspi, when to use with-deps vs without deps","title":"Upgrading"},{"location":"module-dev/intro/","text":"Creating Modules \u00b6 Modules make up a great portion of OpenSight's functionality. They are special types of classes that can operate on inputs and give outputs. They can be used in a wide variety of ways, such as modifing an image, performing math operations, or communicating with a server. Here's an example module, which does the following: Has a setting for the radius of the blur (of type integer) Inputs an image (of type Mat) Outputs the blurred image from dataclasses import dataclass import opsi.manager.cvwrapper as cvw from opsi.manager.manager_schema import Function from opsi.manager.types import Mat , MatBW __package__ = \"opsi.example_module\" __version__ = \"0.123\" class Blur ( Function ): @dataclass class Settings : radius : int @dataclass class Inputs : img : Mat @dataclass class Outputs : img : Mat def run ( self , inputs ): img = cvw . blur ( inputs . img , self . settings . radius ) return self . Outputs ( img = img ) There are already many useful modules included in OpenSight, but creating your own can add more complexity to your vision pipeline. The source code for the modules is located under opsi/modules in the OpenSight repo. Warning Using the cv2 library directly is discouraged. All new OpenCV functionality should go into cvwrapper.py .","title":"Introduction"},{"location":"module-dev/intro/#creating-modules","text":"Modules make up a great portion of OpenSight's functionality. They are special types of classes that can operate on inputs and give outputs. They can be used in a wide variety of ways, such as modifing an image, performing math operations, or communicating with a server. Here's an example module, which does the following: Has a setting for the radius of the blur (of type integer) Inputs an image (of type Mat) Outputs the blurred image from dataclasses import dataclass import opsi.manager.cvwrapper as cvw from opsi.manager.manager_schema import Function from opsi.manager.types import Mat , MatBW __package__ = \"opsi.example_module\" __version__ = \"0.123\" class Blur ( Function ): @dataclass class Settings : radius : int @dataclass class Inputs : img : Mat @dataclass class Outputs : img : Mat def run ( self , inputs ): img = cvw . blur ( inputs . img , self . settings . radius ) return self . Outputs ( img = img ) There are already many useful modules included in OpenSight, but creating your own can add more complexity to your vision pipeline. The source code for the modules is located under opsi/modules in the OpenSight repo. Warning Using the cv2 library directly is discouraged. All new OpenCV functionality should go into cvwrapper.py .","title":"Creating Modules"},{"location":"module-dev/structure/","text":"Module Structure \u00b6 Modules \u00b6 TODO: explain module package structure Functions (break into separate file?) \u00b6 TODO: explain general class setup A function has three main user-facing components: Inputs , Outputs , and Settings . Each one of these is a statically defined Python dataclass . You can create a dataclass by creating a class with the @dataclass decorator, as shown here: @dataclass class Inputs : x : int","title":"Module Structure"},{"location":"module-dev/structure/#module-structure","text":"","title":"Module Structure"},{"location":"module-dev/structure/#modules","text":"TODO: explain module package structure","title":"Modules"},{"location":"module-dev/structure/#functions-break-into-separate-file","text":"TODO: explain general class setup A function has three main user-facing components: Inputs , Outputs , and Settings . Each one of these is a statically defined Python dataclass . You can create a dataclass by creating a class with the @dataclass decorator, as shown here: @dataclass class Inputs : x : int","title":"Functions (break into separate file?)"},{"location":"modules/color/","text":"TODO","title":"Color"},{"location":"modules/contours/","text":"TODO","title":"Contours"},{"location":"modules/draw/","text":"TODO","title":"Draw"},{"location":"modules/mask/","text":"TODO","title":"Mask"},{"location":"modules/nt/","text":"TODO","title":"Nt"},{"location":"modules/videoio/","text":"TODO","title":"Videoio"}]}