{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenSight: the powerful, easy-to-use vision suite \u00b6 OpenSight is an FRC-focused, free and open source computer vision system targeted specifically for the Raspberry Pi. Our goal is to make it easy for people not familiar with vision to be able to make complex pipelines, while also providing powerful functionality for advanced users. Want to get it? \u00b6 For Raspberry Pi, Download the latest release image , flash it onto a micro-sd card, plug it in, then navigate to http://opensight.local once connected to a robot network. For installing OpenSight on non-Raspberry Pi devices and for upgrading from previous versions of OpenSight, you can find more information here . About \u00b6 Our mission is to create an accessible vision suite, with an easy-to-use and works out-of-the box experience, but also allow for more power and greater customizability. We want to make vision more accessible to those with less experience, while also providing the tools for power users and developers to easily add features beyond the default modules.","title":"Home"},{"location":"#opensight-the-powerful-easy-to-use-vision-suite","text":"OpenSight is an FRC-focused, free and open source computer vision system targeted specifically for the Raspberry Pi. Our goal is to make it easy for people not familiar with vision to be able to make complex pipelines, while also providing powerful functionality for advanced users.","title":"OpenSight: the powerful, easy-to-use vision suite"},{"location":"#want-to-get-it","text":"For Raspberry Pi, Download the latest release image , flash it onto a micro-sd card, plug it in, then navigate to http://opensight.local once connected to a robot network. For installing OpenSight on non-Raspberry Pi devices and for upgrading from previous versions of OpenSight, you can find more information here .","title":"Want to get it?"},{"location":"#about","text":"Our mission is to create an accessible vision suite, with an easy-to-use and works out-of-the box experience, but also allow for more power and greater customizability. We want to make vision more accessible to those with less experience, while also providing the tools for power users and developers to easily add features beyond the default modules.","title":"About"},{"location":"creating-modules/","text":"Creating Modules \u00b6 Modules make up a great portion of OpenSight's functionality. They are special types of classes that can operate on inputs and give outputs. They can be used in a wide variety of ways, such as modifing an image, performing math operations, or communicating with a server. Here's an example module, which does the following: Has a setting for the radius of the blur (of type integer) Inputs an image (of type Mat) Outputs the blurred image from dataclasses import dataclass import opsi.manager.cvwrapper as cvw from opsi.manager.manager_schema import Function from opsi.manager.types import Mat , MatBW __package__ = \"opsi.example_module\" __version__ = \"0.123\" class Blur ( Function ): @dataclass class Settings : radius : int @dataclass class Inputs : img : Mat @dataclass class Outputs : img : Mat def run ( self , inputs ): img = cvw . blur ( inputs . img , self . settings . radius ) return self . Outputs ( img = img ) There are already many useful modules included in OpenSight, but creating your own can add more complexity to your vision pipeline. The source code for the modules is located under opsi/modules in the OpenSight repo. Warning Using the cv2 library directly is discouraged. All new OpenCV functionality should go into cvwrapper.py .","title":"Creating Modules"},{"location":"creating-modules/#creating-modules","text":"Modules make up a great portion of OpenSight's functionality. They are special types of classes that can operate on inputs and give outputs. They can be used in a wide variety of ways, such as modifing an image, performing math operations, or communicating with a server. Here's an example module, which does the following: Has a setting for the radius of the blur (of type integer) Inputs an image (of type Mat) Outputs the blurred image from dataclasses import dataclass import opsi.manager.cvwrapper as cvw from opsi.manager.manager_schema import Function from opsi.manager.types import Mat , MatBW __package__ = \"opsi.example_module\" __version__ = \"0.123\" class Blur ( Function ): @dataclass class Settings : radius : int @dataclass class Inputs : img : Mat @dataclass class Outputs : img : Mat def run ( self , inputs ): img = cvw . blur ( inputs . img , self . settings . radius ) return self . Outputs ( img = img ) There are already many useful modules included in OpenSight, but creating your own can add more complexity to your vision pipeline. The source code for the modules is located under opsi/modules in the OpenSight repo. Warning Using the cv2 library directly is discouraged. All new OpenCV functionality should go into cvwrapper.py .","title":"Creating Modules"},{"location":"getting-started/hardware/","text":"TODO: Detail different raspi bundles, expected framerates, 12V->5V, etc","title":"Hardware"},{"location":"getting-started/installation/","text":"TODO: describe how to install on raspi, how to install for package support-level devices (eg. Jetson Nano), and for not specially supported systems (eg. amd64)","title":"Installation"},{"location":"getting-started/upgrading/","text":"TODO: Explain how to upgrade on raspi, when to use with-deps vs without deps","title":"Upgrading"},{"location":"modules/color/","text":"TODO","title":"Color Operations"},{"location":"modules/contours/","text":"TODO","title":"Contours"},{"location":"modules/draw/","text":"TODO","title":"Drawing Operations"},{"location":"modules/mask/","text":"TODO","title":"Mask Operations"},{"location":"modules/nt/","text":"TODO","title":"NetworkTables"},{"location":"modules/videoio/","text":"TODO","title":"Video IO"}]}